/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef HEARTRATEDETAILVIEWBASE_HPP
#define HEARTRATEDETAILVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/heartratedetail_screen/HeartrateDetailPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndOverwrite.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <gui/containers/batteryprogress_container.hpp>
#include <gui/containers/lte_status_container.hpp>

class HeartrateDetailViewBase : public touchgfx::View<HeartrateDetailPresenter>
{
public:
    HeartrateDetailViewBase();
    virtual ~HeartrateDetailViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    touchgfx::TextArea heartrate_label;
    touchgfx::Image heartrate_image;
    touchgfx::TextAreaWithOneWildcard heartrate_value;
    touchgfx::Box topright_box;
    touchgfx::GraphWrapAndOverwrite<24> heartrate_detail_graph;
    touchgfx::GraphElementLine heartrate_detail_graphLine1;
    touchgfx::PainterRGB565 heartrate_detail_graphLine1Painter;
    batteryprogress_container batteryprogress_container1;
    lte_status_container lte_status_container1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HEARTRATE_VALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar heartrate_valueBuffer[HEARTRATE_VALUE_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_UPDATEHR_INTERVAL = 60;
    uint32_t frameCountUpdateHrInterval;

};

#endif // HEARTRATEDETAILVIEWBASE_HPP
